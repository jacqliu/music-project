# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_psmove')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_psmove')
    _psmove = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_psmove', [dirname(__file__)])
        except ImportError:
            import _psmove
            return _psmove
        if fp is not None:
            try:
                _mod = imp.load_module('_psmove', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _psmove = swig_import_helper()
    del swig_import_helper
else:
    import _psmove
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def cdata(ptr, nelements=1):
    return _psmove.cdata(ptr, nelements)
cdata = _psmove.cdata

def memmove(data, indata):
    return _psmove.memmove(data, indata)
memmove = _psmove.memmove
Conn_Bluetooth = _psmove.Conn_Bluetooth
Conn_USB = _psmove.Conn_USB
Conn_Unknown = _psmove.Conn_Unknown
Btn_TRIANGLE = _psmove.Btn_TRIANGLE
Btn_CIRCLE = _psmove.Btn_CIRCLE
Btn_CROSS = _psmove.Btn_CROSS
Btn_SQUARE = _psmove.Btn_SQUARE
Btn_SELECT = _psmove.Btn_SELECT
Btn_START = _psmove.Btn_START
Btn_PS = _psmove.Btn_PS
Btn_MOVE = _psmove.Btn_MOVE
Btn_T = _psmove.Btn_T
Frame_FirstHalf = _psmove.Frame_FirstHalf
Frame_SecondHalf = _psmove.Frame_SecondHalf
Batt_MIN = _psmove.Batt_MIN
Batt_20Percent = _psmove.Batt_20Percent
Batt_40Percent = _psmove.Batt_40Percent
Batt_60Percent = _psmove.Batt_60Percent
Batt_80Percent = _psmove.Batt_80Percent
Batt_MAX = _psmove.Batt_MAX
Batt_CHARGING = _psmove.Batt_CHARGING
Batt_CHARGING_DONE = _psmove.Batt_CHARGING_DONE
Update_Failed = _psmove.Update_Failed
Update_Success = _psmove.Update_Success
Update_Ignored = _psmove.Update_Ignored
PSMove_False = _psmove.PSMove_False
PSMove_True = _psmove.PSMove_True
PSMove_LocalAndRemote = _psmove.PSMove_LocalAndRemote
PSMove_OnlyLocal = _psmove.PSMove_OnlyLocal
PSMove_OnlyRemote = _psmove.PSMove_OnlyRemote
OrientationFusion_None = _psmove.OrientationFusion_None
OrientationFusion_MadgwickIMU = _psmove.OrientationFusion_MadgwickIMU
OrientationFusion_MadgwickMARG = _psmove.OrientationFusion_MadgwickMARG
OrientationFusion_ComplementaryMARG = _psmove.OrientationFusion_ComplementaryMARG
CalibrationPose_Upright = _psmove.CalibrationPose_Upright
CalibrationPose_LyingFlat = _psmove.CalibrationPose_LyingFlat
SensorDataBasis_Native = _psmove.SensorDataBasis_Native
SensorDataBasis_OpenGL = _psmove.SensorDataBasis_OpenGL
PSMOVE_EXT_DATA_BUF_SIZE = _psmove.PSMOVE_EXT_DATA_BUF_SIZE
class PSMove_Ext_Device_Info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMove_Ext_Device_Info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMove_Ext_Device_Info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dev_id"] = _psmove.PSMove_Ext_Device_Info_dev_id_set
    __swig_getmethods__["dev_id"] = _psmove.PSMove_Ext_Device_Info_dev_id_get
    if _newclass:
        dev_id = _swig_property(_psmove.PSMove_Ext_Device_Info_dev_id_get, _psmove.PSMove_Ext_Device_Info_dev_id_set)
    __swig_setmethods__["dev_info"] = _psmove.PSMove_Ext_Device_Info_dev_info_set
    __swig_getmethods__["dev_info"] = _psmove.PSMove_Ext_Device_Info_dev_info_get
    if _newclass:
        dev_info = _swig_property(_psmove.PSMove_Ext_Device_Info_dev_info_get, _psmove.PSMove_Ext_Device_Info_dev_info_set)

    def __init__(self):
        this = _psmove.new_PSMove_Ext_Device_Info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _psmove.delete_PSMove_Ext_Device_Info
    __del__ = lambda self: None
PSMove_Ext_Device_Info_swigregister = _psmove.PSMove_Ext_Device_Info_swigregister
PSMove_Ext_Device_Info_swigregister(PSMove_Ext_Device_Info)

class _PSMove_3AxisVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _PSMove_3AxisVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _PSMove_3AxisVector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _psmove._PSMove_3AxisVector_x_set
    __swig_getmethods__["x"] = _psmove._PSMove_3AxisVector_x_get
    if _newclass:
        x = _swig_property(_psmove._PSMove_3AxisVector_x_get, _psmove._PSMove_3AxisVector_x_set)
    __swig_setmethods__["y"] = _psmove._PSMove_3AxisVector_y_set
    __swig_getmethods__["y"] = _psmove._PSMove_3AxisVector_y_get
    if _newclass:
        y = _swig_property(_psmove._PSMove_3AxisVector_y_get, _psmove._PSMove_3AxisVector_y_set)
    __swig_setmethods__["z"] = _psmove._PSMove_3AxisVector_z_set
    __swig_getmethods__["z"] = _psmove._PSMove_3AxisVector_z_get
    if _newclass:
        z = _swig_property(_psmove._PSMove_3AxisVector_z_get, _psmove._PSMove_3AxisVector_z_set)
    __swig_setmethods__["v"] = _psmove._PSMove_3AxisVector_v_set
    __swig_getmethods__["v"] = _psmove._PSMove_3AxisVector_v_get
    if _newclass:
        v = _swig_property(_psmove._PSMove_3AxisVector_v_get, _psmove._PSMove_3AxisVector_v_set)

    def __init__(self):
        this = _psmove.new__PSMove_3AxisVector()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _psmove.delete__PSMove_3AxisVector
    __del__ = lambda self: None
_PSMove_3AxisVector_swigregister = _psmove._PSMove_3AxisVector_swigregister
_PSMove_3AxisVector_swigregister(_PSMove_3AxisVector)

class _PSMove_3AxisTransform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _PSMove_3AxisTransform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _PSMove_3AxisTransform, name)
    __repr__ = _swig_repr
    __swig_setmethods__["row0"] = _psmove._PSMove_3AxisTransform_row0_set
    __swig_getmethods__["row0"] = _psmove._PSMove_3AxisTransform_row0_get
    if _newclass:
        row0 = _swig_property(_psmove._PSMove_3AxisTransform_row0_get, _psmove._PSMove_3AxisTransform_row0_set)
    __swig_setmethods__["row1"] = _psmove._PSMove_3AxisTransform_row1_set
    __swig_getmethods__["row1"] = _psmove._PSMove_3AxisTransform_row1_get
    if _newclass:
        row1 = _swig_property(_psmove._PSMove_3AxisTransform_row1_get, _psmove._PSMove_3AxisTransform_row1_set)
    __swig_setmethods__["row2"] = _psmove._PSMove_3AxisTransform_row2_set
    __swig_getmethods__["row2"] = _psmove._PSMove_3AxisTransform_row2_get
    if _newclass:
        row2 = _swig_property(_psmove._PSMove_3AxisTransform_row2_get, _psmove._PSMove_3AxisTransform_row2_set)
    __swig_setmethods__["m"] = _psmove._PSMove_3AxisTransform_m_set
    __swig_getmethods__["m"] = _psmove._PSMove_3AxisTransform_m_get
    if _newclass:
        m = _swig_property(_psmove._PSMove_3AxisTransform_m_get, _psmove._PSMove_3AxisTransform_m_set)

    def __init__(self):
        this = _psmove.new__PSMove_3AxisTransform()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _psmove.delete__PSMove_3AxisTransform
    __del__ = lambda self: None
_PSMove_3AxisTransform_swigregister = _psmove._PSMove_3AxisTransform_swigregister
_PSMove_3AxisTransform_swigregister(_PSMove_3AxisTransform)

PSMOVE_CURRENT_VERSION = _psmove.PSMOVE_CURRENT_VERSION

def psmove_init(version):
    return _psmove.psmove_init(version)
psmove_init = _psmove.psmove_init

def psmove_set_remote_config(config):
    return _psmove.psmove_set_remote_config(config)
psmove_set_remote_config = _psmove.psmove_set_remote_config

def psmove_count_connected():
    return _psmove.psmove_count_connected()
psmove_count_connected = _psmove.psmove_count_connected

def psmove_connect():
    return _psmove.psmove_connect()
psmove_connect = _psmove.psmove_connect

def psmove_connect_by_id(id):
    return _psmove.psmove_connect_by_id(id)
psmove_connect_by_id = _psmove.psmove_connect_by_id

def psmove_connection_type(move):
    return _psmove.psmove_connection_type(move)
psmove_connection_type = _psmove.psmove_connection_type

def psmove_is_remote(move):
    return _psmove.psmove_is_remote(move)
psmove_is_remote = _psmove.psmove_is_remote

def psmove_get_serial(move):
    return _psmove.psmove_get_serial(move)
psmove_get_serial = _psmove.psmove_get_serial

def psmove_pair(move):
    return _psmove.psmove_pair(move)
psmove_pair = _psmove.psmove_pair

def psmove_pair_custom(move, new_host_string):
    return _psmove.psmove_pair_custom(move, new_host_string)
psmove_pair_custom = _psmove.psmove_pair_custom

def psmove_set_rate_limiting(move, enabled):
    return _psmove.psmove_set_rate_limiting(move, enabled)
psmove_set_rate_limiting = _psmove.psmove_set_rate_limiting

def psmove_set_leds(move, r, g, b):
    return _psmove.psmove_set_leds(move, r, g, b)
psmove_set_leds = _psmove.psmove_set_leds

def psmove_set_led_pwm_frequency(move, freq):
    return _psmove.psmove_set_led_pwm_frequency(move, freq)
psmove_set_led_pwm_frequency = _psmove.psmove_set_led_pwm_frequency

def psmove_set_rumble(move, rumble):
    return _psmove.psmove_set_rumble(move, rumble)
psmove_set_rumble = _psmove.psmove_set_rumble

def psmove_update_leds(move):
    return _psmove.psmove_update_leds(move)
psmove_update_leds = _psmove.psmove_update_leds

def psmove_poll(move):
    return _psmove.psmove_poll(move)
psmove_poll = _psmove.psmove_poll

def psmove_get_ext_data(move, data):
    return _psmove.psmove_get_ext_data(move, data)
psmove_get_ext_data = _psmove.psmove_get_ext_data

def psmove_send_ext_data(move, data, length):
    return _psmove.psmove_send_ext_data(move, data, length)
psmove_send_ext_data = _psmove.psmove_send_ext_data

def psmove_get_buttons(move):
    return _psmove.psmove_get_buttons(move)
psmove_get_buttons = _psmove.psmove_get_buttons

def psmove_get_button_events(move, pressed, released):
    return _psmove.psmove_get_button_events(move, pressed, released)
psmove_get_button_events = _psmove.psmove_get_button_events

def psmove_is_ext_connected(move):
    return _psmove.psmove_is_ext_connected(move)
psmove_is_ext_connected = _psmove.psmove_is_ext_connected

def psmove_get_ext_device_info(move, info):
    return _psmove.psmove_get_ext_device_info(move, info)
psmove_get_ext_device_info = _psmove.psmove_get_ext_device_info

def psmove_get_battery(move):
    return _psmove.psmove_get_battery(move)
psmove_get_battery = _psmove.psmove_get_battery

def psmove_get_temperature(move):
    return _psmove.psmove_get_temperature(move)
psmove_get_temperature = _psmove.psmove_get_temperature

def psmove_get_temperature_in_celsius(move):
    return _psmove.psmove_get_temperature_in_celsius(move)
psmove_get_temperature_in_celsius = _psmove.psmove_get_temperature_in_celsius

def psmove_get_trigger(move):
    return _psmove.psmove_get_trigger(move)
psmove_get_trigger = _psmove.psmove_get_trigger

def psmove_get_accelerometer(move, ax, ay, az):
    return _psmove.psmove_get_accelerometer(move, ax, ay, az)
psmove_get_accelerometer = _psmove.psmove_get_accelerometer

def psmove_get_gyroscope(move, gx, gy, gz):
    return _psmove.psmove_get_gyroscope(move, gx, gy, gz)
psmove_get_gyroscope = _psmove.psmove_get_gyroscope

def psmove_get_magnetometer(move, mx, my, mz):
    return _psmove.psmove_get_magnetometer(move, mx, my, mz)
psmove_get_magnetometer = _psmove.psmove_get_magnetometer

def psmove_get_accelerometer_frame(move, frame, ax, ay, az):
    return _psmove.psmove_get_accelerometer_frame(move, frame, ax, ay, az)
psmove_get_accelerometer_frame = _psmove.psmove_get_accelerometer_frame

def psmove_get_gyroscope_frame(move, frame, gx, gy, gz):
    return _psmove.psmove_get_gyroscope_frame(move, frame, gx, gy, gz)
psmove_get_gyroscope_frame = _psmove.psmove_get_gyroscope_frame

def psmove_get_magnetometer_vector(move, mx, my, mz):
    return _psmove.psmove_get_magnetometer_vector(move, mx, my, mz)
psmove_get_magnetometer_vector = _psmove.psmove_get_magnetometer_vector

def psmove_get_magnetometer_3axisvector(move, out_m):
    return _psmove.psmove_get_magnetometer_3axisvector(move, out_m)
psmove_get_magnetometer_3axisvector = _psmove.psmove_get_magnetometer_3axisvector

def psmove_reset_magnetometer_calibration(move):
    return _psmove.psmove_reset_magnetometer_calibration(move)
psmove_reset_magnetometer_calibration = _psmove.psmove_reset_magnetometer_calibration

def psmove_save_magnetometer_calibration(move):
    return _psmove.psmove_save_magnetometer_calibration(move)
psmove_save_magnetometer_calibration = _psmove.psmove_save_magnetometer_calibration

def psmove_get_magnetometer_calibration_range(move):
    return _psmove.psmove_get_magnetometer_calibration_range(move)
psmove_get_magnetometer_calibration_range = _psmove.psmove_get_magnetometer_calibration_range

def psmove_has_calibration(move):
    return _psmove.psmove_has_calibration(move)
psmove_has_calibration = _psmove.psmove_has_calibration

def psmove_dump_calibration(move):
    return _psmove.psmove_dump_calibration(move)
psmove_dump_calibration = _psmove.psmove_dump_calibration

def psmove_enable_orientation(move, enabled):
    return _psmove.psmove_enable_orientation(move, enabled)
psmove_enable_orientation = _psmove.psmove_enable_orientation

def psmove_has_orientation(move):
    return _psmove.psmove_has_orientation(move)
psmove_has_orientation = _psmove.psmove_has_orientation

def psmove_get_orientation(move, w, x, y, z):
    return _psmove.psmove_get_orientation(move, w, x, y, z)
psmove_get_orientation = _psmove.psmove_get_orientation

def psmove_reset_orientation(move):
    return _psmove.psmove_reset_orientation(move)
psmove_reset_orientation = _psmove.psmove_reset_orientation

def psmove_set_orientation_fusion_type(move, fusion_type):
    return _psmove.psmove_set_orientation_fusion_type(move, fusion_type)
psmove_set_orientation_fusion_type = _psmove.psmove_set_orientation_fusion_type

def psmove_set_calibration_pose(move, calibration_pose):
    return _psmove.psmove_set_calibration_pose(move, calibration_pose)
psmove_set_calibration_pose = _psmove.psmove_set_calibration_pose

def psmove_set_calibration_transform(move, transform):
    return _psmove.psmove_set_calibration_transform(move, transform)
psmove_set_calibration_transform = _psmove.psmove_set_calibration_transform

def psmove_get_identity_gravity_calibration_direction(move, out_a):
    return _psmove.psmove_get_identity_gravity_calibration_direction(move, out_a)
psmove_get_identity_gravity_calibration_direction = _psmove.psmove_get_identity_gravity_calibration_direction

def psmove_get_transformed_gravity_calibration_direction(move, out_a):
    return _psmove.psmove_get_transformed_gravity_calibration_direction(move, out_a)
psmove_get_transformed_gravity_calibration_direction = _psmove.psmove_get_transformed_gravity_calibration_direction

def psmove_get_identity_magnetometer_calibration_direction(move, out_m):
    return _psmove.psmove_get_identity_magnetometer_calibration_direction(move, out_m)
psmove_get_identity_magnetometer_calibration_direction = _psmove.psmove_get_identity_magnetometer_calibration_direction

def psmove_get_transformed_magnetometer_calibration_direction(move, out_m):
    return _psmove.psmove_get_transformed_magnetometer_calibration_direction(move, out_m)
psmove_get_transformed_magnetometer_calibration_direction = _psmove.psmove_get_transformed_magnetometer_calibration_direction

def psmove_set_magnetometer_calibration_direction(move, m):
    return _psmove.psmove_set_magnetometer_calibration_direction(move, m)
psmove_set_magnetometer_calibration_direction = _psmove.psmove_set_magnetometer_calibration_direction

def psmove_set_sensor_data_basis(move, basis_type):
    return _psmove.psmove_set_sensor_data_basis(move, basis_type)
psmove_set_sensor_data_basis = _psmove.psmove_set_sensor_data_basis

def psmove_set_sensor_data_transform(move, transform):
    return _psmove.psmove_set_sensor_data_transform(move, transform)
psmove_set_sensor_data_transform = _psmove.psmove_set_sensor_data_transform

def psmove_get_transformed_magnetometer_direction(move, out_m):
    return _psmove.psmove_get_transformed_magnetometer_direction(move, out_m)
psmove_get_transformed_magnetometer_direction = _psmove.psmove_get_transformed_magnetometer_direction

def psmove_get_transformed_accelerometer_frame_3axisvector(move, frame, out_a):
    return _psmove.psmove_get_transformed_accelerometer_frame_3axisvector(move, frame, out_a)
psmove_get_transformed_accelerometer_frame_3axisvector = _psmove.psmove_get_transformed_accelerometer_frame_3axisvector

def psmove_get_transformed_accelerometer_frame_direction(move, frame, out_a):
    return _psmove.psmove_get_transformed_accelerometer_frame_direction(move, frame, out_a)
psmove_get_transformed_accelerometer_frame_direction = _psmove.psmove_get_transformed_accelerometer_frame_direction

def psmove_get_transformed_gyroscope_frame_3axisvector(move, frame, out_w):
    return _psmove.psmove_get_transformed_gyroscope_frame_3axisvector(move, frame, out_w)
psmove_get_transformed_gyroscope_frame_3axisvector = _psmove.psmove_get_transformed_gyroscope_frame_3axisvector

def psmove_disconnect(move):
    return _psmove.psmove_disconnect(move)
psmove_disconnect = _psmove.psmove_disconnect

def psmove_reinit():
    return _psmove.psmove_reinit()
psmove_reinit = _psmove.psmove_reinit

def psmove_util_get_ticks():
    return _psmove.psmove_util_get_ticks()
psmove_util_get_ticks = _psmove.psmove_util_get_ticks

def psmove_util_get_data_dir():
    return _psmove.psmove_util_get_data_dir()
psmove_util_get_data_dir = _psmove.psmove_util_get_data_dir

def psmove_util_get_file_path(filename):
    return _psmove.psmove_util_get_file_path(filename)
psmove_util_get_file_path = _psmove.psmove_util_get_file_path

def psmove_util_get_system_file_path(filename):
    return _psmove.psmove_util_get_system_file_path(filename)
psmove_util_get_system_file_path = _psmove.psmove_util_get_system_file_path

def psmove_util_get_env_int(name):
    return _psmove.psmove_util_get_env_int(name)
psmove_util_get_env_int = _psmove.psmove_util_get_env_int

def psmove_util_get_env_string(name):
    return _psmove.psmove_util_get_env_string(name)
psmove_util_get_env_string = _psmove.psmove_util_get_env_string
class PSMove(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSMove, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSMove, name)
    __repr__ = _swig_repr
    __swig_getmethods__["connection_type"] = _psmove.PSMove_connection_type_get
    if _newclass:
        connection_type = _swig_property(_psmove.PSMove_connection_type_get)
    __swig_getmethods__["ax"] = _psmove.PSMove_ax_get
    if _newclass:
        ax = _swig_property(_psmove.PSMove_ax_get)
    __swig_getmethods__["ay"] = _psmove.PSMove_ay_get
    if _newclass:
        ay = _swig_property(_psmove.PSMove_ay_get)
    __swig_getmethods__["az"] = _psmove.PSMove_az_get
    if _newclass:
        az = _swig_property(_psmove.PSMove_az_get)
    __swig_getmethods__["gx"] = _psmove.PSMove_gx_get
    if _newclass:
        gx = _swig_property(_psmove.PSMove_gx_get)
    __swig_getmethods__["gy"] = _psmove.PSMove_gy_get
    if _newclass:
        gy = _swig_property(_psmove.PSMove_gy_get)
    __swig_getmethods__["gz"] = _psmove.PSMove_gz_get
    if _newclass:
        gz = _swig_property(_psmove.PSMove_gz_get)
    __swig_getmethods__["mx"] = _psmove.PSMove_mx_get
    if _newclass:
        mx = _swig_property(_psmove.PSMove_mx_get)
    __swig_getmethods__["my"] = _psmove.PSMove_my_get
    if _newclass:
        my = _swig_property(_psmove.PSMove_my_get)
    __swig_getmethods__["mz"] = _psmove.PSMove_mz_get
    if _newclass:
        mz = _swig_property(_psmove.PSMove_mz_get)

    def __init__(self, *args):
        this = _psmove.new_PSMove(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_accelerometer_frame(self, frame):
        return _psmove.PSMove_get_accelerometer_frame(self, frame)

    def get_gyroscope_frame(self, frame):
        return _psmove.PSMove_get_gyroscope_frame(self, frame)

    def get_magnetometer_vector(self):
        return _psmove.PSMove_get_magnetometer_vector(self)

    def enable_orientation(self, enabled):
        return _psmove.PSMove_enable_orientation(self, enabled)

    def has_orientation(self):
        return _psmove.PSMove_has_orientation(self)

    def has_calibration(self):
        return _psmove.PSMove_has_calibration(self)

    def get_orientation(self):
        return _psmove.PSMove_get_orientation(self)

    def reset_orientation(self):
        return _psmove.PSMove_reset_orientation(self)

    def set_leds(self, r, g, b):
        return _psmove.PSMove_set_leds(self, r, g, b)

    def set_rumble(self, rumble):
        return _psmove.PSMove_set_rumble(self, rumble)

    def update_leds(self):
        return _psmove.PSMove_update_leds(self)

    def set_rate_limiting(self, enabled):
        return _psmove.PSMove_set_rate_limiting(self, enabled)

    def pair(self):
        return _psmove.PSMove_pair(self)

    def pair_custom(self, btaddr):
        return _psmove.PSMove_pair_custom(self, btaddr)

    def get_serial(self):
        return _psmove.PSMove_get_serial(self)

    def is_remote(self):
        return _psmove.PSMove_is_remote(self)

    def poll(self):
        return _psmove.PSMove_poll(self)

    def get_buttons(self):
        return _psmove.PSMove_get_buttons(self)

    def get_button_events(self):
        return _psmove.PSMove_get_button_events(self)

    def get_battery(self):
        return _psmove.PSMove_get_battery(self)

    def get_temperature(self):
        return _psmove.PSMove_get_temperature(self)

    def get_temperature_in_celsius(self):
        return _psmove.PSMove_get_temperature_in_celsius(self)

    def get_trigger(self):
        return _psmove.PSMove_get_trigger(self)
    __swig_destroy__ = _psmove.delete_PSMove
    __del__ = lambda self: None
PSMove_swigregister = _psmove.PSMove_swigregister
PSMove_swigregister(PSMove)


def init(version):
    return _psmove.init(version)
init = _psmove.init

def set_remote_config(config):
    return _psmove.set_remote_config(config)
set_remote_config = _psmove.set_remote_config

def count_connected():
    return _psmove.count_connected()
count_connected = _psmove.count_connected

def reinit():
    return _psmove.reinit()
reinit = _psmove.reinit
# This file is compatible with both classic and new-style classes.


