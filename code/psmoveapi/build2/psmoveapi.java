/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.thp.psmove;

public class psmoveapi implements psmoveapiConstants {
  public static PSMove_Bool psmove_init(PSMove_Version version) {
    return PSMove_Bool.swigToEnum(psmoveapiJNI.psmove_init(version.swigValue()));
  }

  public static void psmove_set_remote_config(RemoteConfig config) {
    psmoveapiJNI.psmove_set_remote_config(config.swigValue());
  }

  public static int psmove_count_connected() {
    return psmoveapiJNI.psmove_count_connected();
  }

  public static PSMove psmove_connect() {
    long cPtr = psmoveapiJNI.psmove_connect();
    return (cPtr == 0) ? null : new PSMove(cPtr, false);
  }

  public static PSMove psmove_connect_by_id(int id) {
    long cPtr = psmoveapiJNI.psmove_connect_by_id(id);
    return (cPtr == 0) ? null : new PSMove(cPtr, false);
  }

  public static ConnectionType psmove_connection_type(PSMove move) {
    return ConnectionType.swigToEnum(psmoveapiJNI.psmove_connection_type(PSMove.getCPtr(move), move));
  }

  public static PSMove_Bool psmove_is_remote(PSMove move) {
    return PSMove_Bool.swigToEnum(psmoveapiJNI.psmove_is_remote(PSMove.getCPtr(move), move));
  }

  public static String psmove_get_serial(PSMove move) {
    return psmoveapiJNI.psmove_get_serial(PSMove.getCPtr(move), move);
  }

  public static PSMove_Bool psmove_pair(PSMove move) {
    return PSMove_Bool.swigToEnum(psmoveapiJNI.psmove_pair(PSMove.getCPtr(move), move));
  }

  public static PSMove_Bool psmove_pair_custom(PSMove move, String new_host_string) {
    return PSMove_Bool.swigToEnum(psmoveapiJNI.psmove_pair_custom(PSMove.getCPtr(move), move, new_host_string));
  }

  public static void psmove_set_rate_limiting(PSMove move, PSMove_Bool enabled) {
    psmoveapiJNI.psmove_set_rate_limiting(PSMove.getCPtr(move), move, enabled.swigValue());
  }

  public static void psmove_set_leds(PSMove move, short r, short g, short b) {
    psmoveapiJNI.psmove_set_leds(PSMove.getCPtr(move), move, r, g, b);
  }

  public static PSMove_Bool psmove_set_led_pwm_frequency(PSMove move, long freq) {
    return PSMove_Bool.swigToEnum(psmoveapiJNI.psmove_set_led_pwm_frequency(PSMove.getCPtr(move), move, freq));
  }

  public static void psmove_set_rumble(PSMove move, short rumble) {
    psmoveapiJNI.psmove_set_rumble(PSMove.getCPtr(move), move, rumble);
  }

  public static PSMove_Update_Result psmove_update_leds(PSMove move) {
    return PSMove_Update_Result.swigToEnum(psmoveapiJNI.psmove_update_leds(PSMove.getCPtr(move), move));
  }

  public static int psmove_poll(PSMove move) {
    return psmoveapiJNI.psmove_poll(PSMove.getCPtr(move), move);
  }

  public static PSMove_Bool psmove_get_ext_data(PSMove move, SWIGTYPE_p_a_5__unsigned_char data) {
    return PSMove_Bool.swigToEnum(psmoveapiJNI.psmove_get_ext_data(PSMove.getCPtr(move), move, SWIGTYPE_p_a_5__unsigned_char.getCPtr(data)));
  }

  public static PSMove_Bool psmove_send_ext_data(PSMove move, SWIGTYPE_p_unsigned_char data, short length) {
    return PSMove_Bool.swigToEnum(psmoveapiJNI.psmove_send_ext_data(PSMove.getCPtr(move), move, SWIGTYPE_p_unsigned_char.getCPtr(data), length));
  }

  public static long psmove_get_buttons(PSMove move) {
    return psmoveapiJNI.psmove_get_buttons(PSMove.getCPtr(move), move);
  }

  public static void psmove_get_button_events(PSMove move, SWIGTYPE_p_unsigned_int pressed, SWIGTYPE_p_unsigned_int released) {
    psmoveapiJNI.psmove_get_button_events(PSMove.getCPtr(move), move, SWIGTYPE_p_unsigned_int.getCPtr(pressed), SWIGTYPE_p_unsigned_int.getCPtr(released));
  }

  public static PSMove_Bool psmove_is_ext_connected(PSMove move) {
    return PSMove_Bool.swigToEnum(psmoveapiJNI.psmove_is_ext_connected(PSMove.getCPtr(move), move));
  }

  public static PSMove_Bool psmove_get_ext_device_info(PSMove move, PSMove_Ext_Device_Info info) {
    return PSMove_Bool.swigToEnum(psmoveapiJNI.psmove_get_ext_device_info(PSMove.getCPtr(move), move, PSMove_Ext_Device_Info.getCPtr(info), info));
  }

  public static BatteryLevel psmove_get_battery(PSMove move) {
    return BatteryLevel.swigToEnum(psmoveapiJNI.psmove_get_battery(PSMove.getCPtr(move), move));
  }

  public static int psmove_get_temperature(PSMove move) {
    return psmoveapiJNI.psmove_get_temperature(PSMove.getCPtr(move), move);
  }

  public static float psmove_get_temperature_in_celsius(PSMove move) {
    return psmoveapiJNI.psmove_get_temperature_in_celsius(PSMove.getCPtr(move), move);
  }

  public static short psmove_get_trigger(PSMove move) {
    return psmoveapiJNI.psmove_get_trigger(PSMove.getCPtr(move), move);
  }

  public static void psmove_get_accelerometer(PSMove move, SWIGTYPE_p_int ax, SWIGTYPE_p_int ay, SWIGTYPE_p_int az) {
    psmoveapiJNI.psmove_get_accelerometer(PSMove.getCPtr(move), move, SWIGTYPE_p_int.getCPtr(ax), SWIGTYPE_p_int.getCPtr(ay), SWIGTYPE_p_int.getCPtr(az));
  }

  public static void psmove_get_gyroscope(PSMove move, SWIGTYPE_p_int gx, SWIGTYPE_p_int gy, SWIGTYPE_p_int gz) {
    psmoveapiJNI.psmove_get_gyroscope(PSMove.getCPtr(move), move, SWIGTYPE_p_int.getCPtr(gx), SWIGTYPE_p_int.getCPtr(gy), SWIGTYPE_p_int.getCPtr(gz));
  }

  public static void psmove_get_magnetometer(PSMove move, SWIGTYPE_p_int mx, SWIGTYPE_p_int my, SWIGTYPE_p_int mz) {
    psmoveapiJNI.psmove_get_magnetometer(PSMove.getCPtr(move), move, SWIGTYPE_p_int.getCPtr(mx), SWIGTYPE_p_int.getCPtr(my), SWIGTYPE_p_int.getCPtr(mz));
  }

  public static void psmove_get_accelerometer_frame(PSMove move, Frame frame, SWIGTYPE_p_float ax, SWIGTYPE_p_float ay, SWIGTYPE_p_float az) {
    psmoveapiJNI.psmove_get_accelerometer_frame(PSMove.getCPtr(move), move, frame.swigValue(), SWIGTYPE_p_float.getCPtr(ax), SWIGTYPE_p_float.getCPtr(ay), SWIGTYPE_p_float.getCPtr(az));
  }

  public static void psmove_get_gyroscope_frame(PSMove move, Frame frame, SWIGTYPE_p_float gx, SWIGTYPE_p_float gy, SWIGTYPE_p_float gz) {
    psmoveapiJNI.psmove_get_gyroscope_frame(PSMove.getCPtr(move), move, frame.swigValue(), SWIGTYPE_p_float.getCPtr(gx), SWIGTYPE_p_float.getCPtr(gy), SWIGTYPE_p_float.getCPtr(gz));
  }

  public static void psmove_get_magnetometer_vector(PSMove move, SWIGTYPE_p_float mx, SWIGTYPE_p_float my, SWIGTYPE_p_float mz) {
    psmoveapiJNI.psmove_get_magnetometer_vector(PSMove.getCPtr(move), move, SWIGTYPE_p_float.getCPtr(mx), SWIGTYPE_p_float.getCPtr(my), SWIGTYPE_p_float.getCPtr(mz));
  }

  public static void psmove_get_magnetometer_3axisvector(PSMove move, _PSMove_3AxisVector out_m) {
    psmoveapiJNI.psmove_get_magnetometer_3axisvector(PSMove.getCPtr(move), move, _PSMove_3AxisVector.getCPtr(out_m), out_m);
  }

  public static void psmove_reset_magnetometer_calibration(PSMove move) {
    psmoveapiJNI.psmove_reset_magnetometer_calibration(PSMove.getCPtr(move), move);
  }

  public static void psmove_save_magnetometer_calibration(PSMove move) {
    psmoveapiJNI.psmove_save_magnetometer_calibration(PSMove.getCPtr(move), move);
  }

  public static float psmove_get_magnetometer_calibration_range(PSMove move) {
    return psmoveapiJNI.psmove_get_magnetometer_calibration_range(PSMove.getCPtr(move), move);
  }

  public static PSMove_Bool psmove_has_calibration(PSMove move) {
    return PSMove_Bool.swigToEnum(psmoveapiJNI.psmove_has_calibration(PSMove.getCPtr(move), move));
  }

  public static void psmove_dump_calibration(PSMove move) {
    psmoveapiJNI.psmove_dump_calibration(PSMove.getCPtr(move), move);
  }

  public static void psmove_enable_orientation(PSMove move, PSMove_Bool enabled) {
    psmoveapiJNI.psmove_enable_orientation(PSMove.getCPtr(move), move, enabled.swigValue());
  }

  public static PSMove_Bool psmove_has_orientation(PSMove move) {
    return PSMove_Bool.swigToEnum(psmoveapiJNI.psmove_has_orientation(PSMove.getCPtr(move), move));
  }

  public static void psmove_get_orientation(PSMove move, SWIGTYPE_p_float w, SWIGTYPE_p_float x, SWIGTYPE_p_float y, SWIGTYPE_p_float z) {
    psmoveapiJNI.psmove_get_orientation(PSMove.getCPtr(move), move, SWIGTYPE_p_float.getCPtr(w), SWIGTYPE_p_float.getCPtr(x), SWIGTYPE_p_float.getCPtr(y), SWIGTYPE_p_float.getCPtr(z));
  }

  public static void psmove_reset_orientation(PSMove move) {
    psmoveapiJNI.psmove_reset_orientation(PSMove.getCPtr(move), move);
  }

  public static void psmove_set_orientation_fusion_type(PSMove move, PSMoveOrientation_Fusion_Type fusion_type) {
    psmoveapiJNI.psmove_set_orientation_fusion_type(PSMove.getCPtr(move), move, fusion_type.swigValue());
  }

  public static void psmove_set_calibration_pose(PSMove move, PSMove_CalibrationPose_Type calibration_pose) {
    psmoveapiJNI.psmove_set_calibration_pose(PSMove.getCPtr(move), move, calibration_pose.swigValue());
  }

  public static void psmove_set_calibration_transform(PSMove move, _PSMove_3AxisTransform transform) {
    psmoveapiJNI.psmove_set_calibration_transform(PSMove.getCPtr(move), move, _PSMove_3AxisTransform.getCPtr(transform), transform);
  }

  public static void psmove_get_identity_gravity_calibration_direction(PSMove move, _PSMove_3AxisVector out_a) {
    psmoveapiJNI.psmove_get_identity_gravity_calibration_direction(PSMove.getCPtr(move), move, _PSMove_3AxisVector.getCPtr(out_a), out_a);
  }

  public static void psmove_get_transformed_gravity_calibration_direction(PSMove move, _PSMove_3AxisVector out_a) {
    psmoveapiJNI.psmove_get_transformed_gravity_calibration_direction(PSMove.getCPtr(move), move, _PSMove_3AxisVector.getCPtr(out_a), out_a);
  }

  public static void psmove_get_identity_magnetometer_calibration_direction(PSMove move, _PSMove_3AxisVector out_m) {
    psmoveapiJNI.psmove_get_identity_magnetometer_calibration_direction(PSMove.getCPtr(move), move, _PSMove_3AxisVector.getCPtr(out_m), out_m);
  }

  public static void psmove_get_transformed_magnetometer_calibration_direction(PSMove move, _PSMove_3AxisVector out_m) {
    psmoveapiJNI.psmove_get_transformed_magnetometer_calibration_direction(PSMove.getCPtr(move), move, _PSMove_3AxisVector.getCPtr(out_m), out_m);
  }

  public static void psmove_set_magnetometer_calibration_direction(PSMove move, _PSMove_3AxisVector m) {
    psmoveapiJNI.psmove_set_magnetometer_calibration_direction(PSMove.getCPtr(move), move, _PSMove_3AxisVector.getCPtr(m), m);
  }

  public static void psmove_set_sensor_data_basis(PSMove move, PSMove_SensorDataBasis_Type basis_type) {
    psmoveapiJNI.psmove_set_sensor_data_basis(PSMove.getCPtr(move), move, basis_type.swigValue());
  }

  public static void psmove_set_sensor_data_transform(PSMove move, _PSMove_3AxisTransform transform) {
    psmoveapiJNI.psmove_set_sensor_data_transform(PSMove.getCPtr(move), move, _PSMove_3AxisTransform.getCPtr(transform), transform);
  }

  public static void psmove_get_transformed_magnetometer_direction(PSMove move, _PSMove_3AxisVector out_m) {
    psmoveapiJNI.psmove_get_transformed_magnetometer_direction(PSMove.getCPtr(move), move, _PSMove_3AxisVector.getCPtr(out_m), out_m);
  }

  public static void psmove_get_transformed_accelerometer_frame_3axisvector(PSMove move, Frame frame, _PSMove_3AxisVector out_a) {
    psmoveapiJNI.psmove_get_transformed_accelerometer_frame_3axisvector(PSMove.getCPtr(move), move, frame.swigValue(), _PSMove_3AxisVector.getCPtr(out_a), out_a);
  }

  public static void psmove_get_transformed_accelerometer_frame_direction(PSMove move, Frame frame, _PSMove_3AxisVector out_a) {
    psmoveapiJNI.psmove_get_transformed_accelerometer_frame_direction(PSMove.getCPtr(move), move, frame.swigValue(), _PSMove_3AxisVector.getCPtr(out_a), out_a);
  }

  public static void psmove_get_transformed_gyroscope_frame_3axisvector(PSMove move, Frame frame, _PSMove_3AxisVector out_w) {
    psmoveapiJNI.psmove_get_transformed_gyroscope_frame_3axisvector(PSMove.getCPtr(move), move, frame.swigValue(), _PSMove_3AxisVector.getCPtr(out_w), out_w);
  }

  public static void psmove_disconnect(PSMove move) {
    psmoveapiJNI.psmove_disconnect(PSMove.getCPtr(move), move);
  }

  public static void psmove_reinit() {
    psmoveapiJNI.psmove_reinit();
  }

  public static int psmove_util_get_ticks() {
    return psmoveapiJNI.psmove_util_get_ticks();
  }

  public static String psmove_util_get_data_dir() {
    return psmoveapiJNI.psmove_util_get_data_dir();
  }

  public static String psmove_util_get_file_path(String filename) {
    return psmoveapiJNI.psmove_util_get_file_path(filename);
  }

  public static String psmove_util_get_system_file_path(String filename) {
    return psmoveapiJNI.psmove_util_get_system_file_path(filename);
  }

  public static int psmove_util_get_env_int(String name) {
    return psmoveapiJNI.psmove_util_get_env_int(name);
  }

  public static String psmove_util_get_env_string(String name) {
    return psmoveapiJNI.psmove_util_get_env_string(name);
  }

  public static int init(PSMove_Version version) {
    return psmoveapiJNI.init(version.swigValue());
  }

  public static void set_remote_config(RemoteConfig config) {
    psmoveapiJNI.set_remote_config(config.swigValue());
  }

  public static int count_connected() {
    return psmoveapiJNI.count_connected();
  }

  public static void reinit() {
    psmoveapiJNI.reinit();
  }

}
